package com.ings.gogo.homehuidata.db.moldeldata;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ings.gogo.homehuidata.db.surface.SurfaceModeldb0;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "commodity".
*/
public class SurfaceModeldb0Dao extends AbstractDao<SurfaceModeldb0, Long> {

    public static final String TABLENAME = "commodity";

    /**
     * Properties of entity SurfaceModeldb0.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Proid = new Property(1, String.class, "proid", false, "proid_at");
        public final static Property Proname = new Property(2, String.class, "proname", false, "proname_at");
        public final static Property Shortdesc = new Property(3, String.class, "shortdesc", false, "shortdese_at");
        public final static Property Markprice = new Property(4, int.class, "markprice", false, "markprice_at");
        public final static Property Price = new Property(5, int.class, "price", false, "price_at");
        public final static Property Discount = new Property(6, int.class, "discount", false, "discount_at");
        public final static Property Stock = new Property(7, int.class, "stock", false, "stock_at");
        public final static Property Imgurl = new Property(8, String.class, "imgurl", false, "imgurl");
    }


    public SurfaceModeldb0Dao(DaoConfig config) {
        super(config);
    }
    
    public SurfaceModeldb0Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"commodity\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"proid_at\" TEXT," + // 1: proid
                "\"proname_at\" TEXT," + // 2: proname
                "\"shortdese_at\" TEXT," + // 3: shortdesc
                "\"markprice_at\" INTEGER NOT NULL ," + // 4: markprice
                "\"price_at\" INTEGER NOT NULL ," + // 5: price
                "\"discount_at\" INTEGER NOT NULL ," + // 6: discount
                "\"stock_at\" INTEGER NOT NULL ," + // 7: stock
                "\"imgurl\" TEXT);"); // 8: imgurl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"commodity\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SurfaceModeldb0 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String proid = entity.getProid();
        if (proid != null) {
            stmt.bindString(2, proid);
        }
 
        String proname = entity.getProname();
        if (proname != null) {
            stmt.bindString(3, proname);
        }
 
        String shortdesc = entity.getShortdesc();
        if (shortdesc != null) {
            stmt.bindString(4, shortdesc);
        }
        stmt.bindLong(5, entity.getMarkprice());
        stmt.bindLong(6, entity.getPrice());
        stmt.bindLong(7, entity.getDiscount());
        stmt.bindLong(8, entity.getStock());
 
        String imgurl = entity.getImgurl();
        if (imgurl != null) {
            stmt.bindString(9, imgurl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SurfaceModeldb0 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String proid = entity.getProid();
        if (proid != null) {
            stmt.bindString(2, proid);
        }
 
        String proname = entity.getProname();
        if (proname != null) {
            stmt.bindString(3, proname);
        }
 
        String shortdesc = entity.getShortdesc();
        if (shortdesc != null) {
            stmt.bindString(4, shortdesc);
        }
        stmt.bindLong(5, entity.getMarkprice());
        stmt.bindLong(6, entity.getPrice());
        stmt.bindLong(7, entity.getDiscount());
        stmt.bindLong(8, entity.getStock());
 
        String imgurl = entity.getImgurl();
        if (imgurl != null) {
            stmt.bindString(9, imgurl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SurfaceModeldb0 readEntity(Cursor cursor, int offset) {
        SurfaceModeldb0 entity = new SurfaceModeldb0( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // proid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // proname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shortdesc
            cursor.getInt(offset + 4), // markprice
            cursor.getInt(offset + 5), // price
            cursor.getInt(offset + 6), // discount
            cursor.getInt(offset + 7), // stock
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // imgurl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SurfaceModeldb0 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShortdesc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMarkprice(cursor.getInt(offset + 4));
        entity.setPrice(cursor.getInt(offset + 5));
        entity.setDiscount(cursor.getInt(offset + 6));
        entity.setStock(cursor.getInt(offset + 7));
        entity.setImgurl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SurfaceModeldb0 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SurfaceModeldb0 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SurfaceModeldb0 entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
