package com.ings.gogo.homehuidata.db.moldeldata;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ings.gogo.homehuidata.db.surface.SurfaceModeldb1;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "add".
*/
public class SurfaceModeldb1Dao extends AbstractDao<SurfaceModeldb1, Long> {

    public static final String TABLENAME = "add";

    /**
     * Properties of entity SurfaceModeldb1.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Pullname = new Property(1, String.class, "pullname", false, "pullname_at");
        public final static Property Pender = new Property(2, String.class, "pender", false, "pender_at");
        public final static Property Number = new Property(3, String.class, "number", false, "number_at");
        public final static Property Detailedaddress = new Property(4, String.class, "detailedaddress", false, "detailedaddress_at");
        public final static Property Remarks = new Property(5, String.class, "remarks", false, "remarks_at");
    }


    public SurfaceModeldb1Dao(DaoConfig config) {
        super(config);
    }
    
    public SurfaceModeldb1Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"add\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"pullname_at\" TEXT," + // 1: pullname
                "\"pender_at\" TEXT," + // 2: pender
                "\"number_at\" TEXT," + // 3: number
                "\"detailedaddress_at\" TEXT," + // 4: detailedaddress
                "\"remarks_at\" TEXT);"); // 5: remarks
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"add\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SurfaceModeldb1 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pullname = entity.getPullname();
        if (pullname != null) {
            stmt.bindString(2, pullname);
        }
 
        String pender = entity.getPender();
        if (pender != null) {
            stmt.bindString(3, pender);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(4, number);
        }
 
        String detailedaddress = entity.getDetailedaddress();
        if (detailedaddress != null) {
            stmt.bindString(5, detailedaddress);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(6, remarks);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SurfaceModeldb1 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pullname = entity.getPullname();
        if (pullname != null) {
            stmt.bindString(2, pullname);
        }
 
        String pender = entity.getPender();
        if (pender != null) {
            stmt.bindString(3, pender);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(4, number);
        }
 
        String detailedaddress = entity.getDetailedaddress();
        if (detailedaddress != null) {
            stmt.bindString(5, detailedaddress);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(6, remarks);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SurfaceModeldb1 readEntity(Cursor cursor, int offset) {
        SurfaceModeldb1 entity = new SurfaceModeldb1( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pullname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pender
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // number
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // detailedaddress
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // remarks
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SurfaceModeldb1 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPullname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPender(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDetailedaddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRemarks(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SurfaceModeldb1 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SurfaceModeldb1 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SurfaceModeldb1 entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
